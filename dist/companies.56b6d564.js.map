{"version":3,"sources":["index.js"],"names":["table","document","querySelector","tbody","filterInput","btnsContainer","globalSortedCompanies","globalFilteredCompanies","fetchCompanies","response","fetch","data","json","fetchIncomes","id","mergeFetchObjects","fetchedCompanies","fetchedCompany","fetchedIncomes","incomes","calculateTotalIncome","companies","company","totalIncome","reduce","previous","current","Number","value","sortByTotalIncome","sort","a","b","pageButtons","currentPage","amountOfItemsPerPage","renderButtons","array","amountOfPages","Math","ceil","length","buttonElement","i","button","innerHTML","querySelectorAll","addEventListener","e","handlePageChange","renderCompanies","itemsOfPage","companiesIntoElements","slice","map","name","city","toFixed","join","companiesRows","companyRow","handleCompanyClick","target","dataset","specificCompany","globalSortedCompany","parentNode","key","modalTemplate","insertAdjacentHTML","modal","body","removeChild","bootFunction","sortedCompanies","filterByName","filteredCompanies","filter","toLowerCase","includes"],"mappings":";AAAA,MAAMA,EAAQC,SAASC,cAAc,UAC/BC,EAAQF,SAASC,cAAc,UAC/BE,EAAcH,SAASC,cAAc,gBACrCG,EAAgBJ,SAASC,cAAc,kBAE7C,IAAII,EACAC,EAEJ,MAAMC,EAAiB,UACjBC,IAAAA,QAAiBC,MAAO,gDAErBC,aADUF,EAASG,QAItBC,EAAe,MAAA,IACfJ,IAAAA,QAAiBC,oDAAoDI,KAElEH,aADUF,EAASG,QAItBG,EAAoB,UACpBC,IAAAA,QAAyBR,IACxBS,IAAAA,kBAAkBD,EAAkB,CACjCE,MAAAA,QAAuBL,EAAaI,eAAeH,IACzDG,eAAeE,cAAgBD,EAAeC,QAEzCH,OAAAA,GAGHI,EAAuB,UACrBC,MAAAA,QAAkBN,IACnBO,IAAAA,WAAWD,EACdC,QAAQC,YAAcD,QAAQH,QAAQK,OAAO,CAACC,EAAUC,IAC/CD,EAAWE,OAAOD,EAAQE,OAChC,GAEEP,OAAAA,GAGHQ,EAAoB,UAClBR,MAAAA,QAAkBD,IAGjBC,OAFPA,EAAUS,KAAK,CAACC,EAAGC,IAAOD,EAAER,YAAcS,EAAET,YAAe,GAAK,GAChEjB,EAAwBe,EACjBA,GAIT,IAAIY,EAEAC,EAAc,EAClB,MAAMC,EAAuB,GAEvBC,EAAiBC,IACfC,MAAAA,EAAgBC,KAAKC,KAAKH,EAAMI,OAHX,IAIvBC,IAAAA,EAAgB,GACf,IAAA,IAAIC,EAAI,EAAGA,GAAKL,EAAeK,IAClCD,4CAA0DC,KAAKA,aAI5DC,IAAAA,UAFLvC,EAAcwC,UAAYH,EAC1BT,EAAchC,SAAS6C,iBAAiB,gBAEtCF,OAAOG,iBAAiB,QAAUC,IAChCC,EAAiBD,MAMjBE,EAAmBb,IACjBc,MACAC,EADcf,EAAMgB,MAnBC,GAmBMnB,EAnBN,GAAA,GAmB0FA,GAC3EoB,IAAKhC,mCACbA,EAAQR,kBAChCQ,EAAQR,sBACRQ,EAAQiC,wBACRjC,EAAQkC,wBACRlC,EAAQC,YAAYkC,QAAQ,sBAEjCC,KAAK,IACVvD,EAAM0C,UAAYO,EACZO,MAAAA,EAAgB1D,SAAS6C,iBAAiB,YAC3Cc,IAAAA,cAAcD,EACjBC,WAAWb,iBAAiB,QAAUC,IAAOa,EAAmBb,MAI9DC,EAAoBD,IACxBd,EAAcP,OAAOqB,EAAEc,OAAOC,QAAQnC,OACtCsB,EAAgB3C,GAA2BD,IAGvCuD,EAAsBb,IACtBgB,IAAAA,EACCC,IAAAA,uBAAuB3D,EACvBqB,OAAOqB,EAAEc,OAAOI,WAAWH,QAAQI,OAASF,oBAAoBnD,KACjEkD,EAAkBC,qBAGhBG,MAAAA,+CAEKJ,EAAgBlD,wBACdkD,EAAgBT,0BAChBS,EAAgBR,kCACRQ,EAAgBzC,2CACdyC,EAAgBzC,YAAcyC,EAAgB7C,QAAQsB,6EAI7EzC,EAAMqE,mBAAmB,WAAYD,GAC/BE,MAAAA,EAAQrE,SAASC,cAAc,gBACbD,SAASC,cAAc,oBAC/B6C,iBAAiB,QAAS,KACxC9C,SAASsE,KAAKC,YAAYF,MAKxBG,EAAe,UACbC,MAAAA,EAAmBpE,SAA+BuB,IACxDO,EAAcsC,GACdxB,EAAgBwB,GAChBtE,EAAY2C,iBAAiB,QAAS,KACpC4B,OAIEA,EAAe,UACnBzC,EAAc,EACRb,MACAuD,EADYtE,EACkBuE,OAAQlC,GAAMA,EAAEY,KAAKuB,cAAcC,SAAS3E,EAAYwB,MAAMkD,gBAClGvE,EAA0BqE,EAC1BxC,EAAcwC,GACd1B,EAAgB0B,IAIlBH","file":"companies.56b6d564.js","sourceRoot":"..","sourcesContent":["const table = document.querySelector('#table')\r\nconst tbody = document.querySelector('#tbody')\r\nconst filterInput = document.querySelector('#filterInput')\r\nconst btnsContainer = document.querySelector('#btnsContainer')\r\n\r\nlet globalSortedCompanies;\r\nlet globalFilteredCompanies;\r\n\r\nconst fetchCompanies = async () => {\r\n  let response = await fetch(`https://recruitment.hal.skygate.io/companies`);\r\n  let data = await response.json();\r\n  return data;\r\n}\r\n\r\nconst fetchIncomes = async (id) => {\r\n  let response = await fetch(`https://recruitment.hal.skygate.io/incomes/${id}`);\r\n  let data = await response.json();\r\n  return data;\r\n}\r\n\r\nconst mergeFetchObjects = async () => {\r\n  let fetchedCompanies = await fetchCompanies();\r\n  for (fetchedCompany of fetchedCompanies) {\r\n    const fetchedIncomes = await fetchIncomes(fetchedCompany.id)\r\n    fetchedCompany.incomes = await fetchedIncomes.incomes;\r\n  }\r\n  return fetchedCompanies;\r\n}\r\n\r\nconst calculateTotalIncome = async () => {\r\n  const companies = await mergeFetchObjects();\r\n  for (company of companies) {\r\n    company.totalIncome = company.incomes.reduce((previous, current) => {\r\n      return previous + Number(current.value);\r\n    }, 0);\r\n  }\r\n  return companies;\r\n}\r\n\r\nconst sortByTotalIncome = async () => {\r\n  const companies = await calculateTotalIncome();\r\n  companies.sort((a, b) => (a.totalIncome < b.totalIncome) ? 1 : -1)\r\n  globalSortedCompanies = companies;\r\n  return companies;\r\n}\r\n\r\n//Pagination\r\nlet pageButtons;\r\n\r\nlet currentPage = 1;\r\nconst amountOfItemsPerPage = 30;\r\n\r\nconst renderButtons = (array) => {\r\n  const amountOfPages = Math.ceil(array.length / amountOfItemsPerPage)\r\n  let buttonElement = \"\";\r\n  for (let i = 1; i <= amountOfPages; i++) {\r\n    buttonElement += `<button class=\"pageButton\" data-value=${i}>${i}</button>`\r\n  }\r\n  btnsContainer.innerHTML = buttonElement;\r\n  pageButtons = document.querySelectorAll('.pageButton')\r\n  for (button of pageButtons) {\r\n    button.addEventListener(\"click\", (e) => {\r\n      handlePageChange(e)\r\n    })\r\n  }\r\n}\r\n\r\n//Render\r\nconst renderCompanies = (array) => {\r\n  const itemsOfPage = array.slice((currentPage * amountOfItemsPerPage - amountOfItemsPerPage), (amountOfItemsPerPage * currentPage))\r\n  const companiesIntoElements = itemsOfPage.map((company) => (\r\n    `<tr class=\"company\" data-key=${company.id}>\r\n      <td>${company.id}</td>\r\n      <td>${company.name}</td>\r\n      <td>${company.city}</td>\r\n      <td>${company.totalIncome.toFixed(2)}</td>\r\n    </tr>`\r\n    )).join('')\r\n  tbody.innerHTML = companiesIntoElements;\r\n  const companiesRows = document.querySelectorAll('.company');\r\n  for (companyRow of companiesRows) {\r\n    companyRow.addEventListener('click', (e) => {handleCompanyClick(e)})\r\n  };\r\n}\r\n    \r\nconst handlePageChange = (e) => {\r\n  currentPage = Number(e.target.dataset.value);\r\n  renderCompanies(globalFilteredCompanies || globalSortedCompanies);\r\n}\r\n\r\nconst handleCompanyClick = (e) => {\r\n  let specificCompany;\r\n  for (globalSortedCompany of globalSortedCompanies) {\r\n    if(Number(e.target.parentNode.dataset.key) === globalSortedCompany.id) {\r\n      specificCompany = globalSortedCompany;\r\n    };\r\n  };\r\n  const modalTemplate = `\r\n  <div class=\"customModal\">\r\n    <p>id: ${specificCompany.id}</p>\r\n    <p>name: ${specificCompany.name}</p>\r\n    <p>city: ${specificCompany.city}</p>\r\n    <p>total income: ${specificCompany.totalIncome}</p>\r\n    <p>avarage income: ${specificCompany.totalIncome / specificCompany.incomes.length}</p>\r\n    <button class=\"modalClosingBtn\">OK!</button>\r\n  </div>\r\n  `;\r\n  table.insertAdjacentHTML('afterend', modalTemplate);\r\n  const modal = document.querySelector('.customModal');\r\n  const modalClosingBtn = document.querySelector('.modalClosingBtn');\r\n  modalClosingBtn.addEventListener('click', () => {\r\n    document.body.removeChild(modal);\r\n  })\r\n}\r\n\r\n//Boot\r\nconst bootFunction = async () => {\r\n  const sortedCompanies = (globalSortedCompanies || await sortByTotalIncome());\r\n  renderButtons(sortedCompanies);\r\n  renderCompanies(sortedCompanies);\r\n  filterInput.addEventListener(\"input\", () => {\r\n    filterByName();\r\n  })\r\n}\r\n    \r\nconst filterByName = async () => {\r\n  currentPage = 1;\r\n  const companies = globalSortedCompanies;\r\n  const filteredCompanies = companies.filter((i) => i.name.toLowerCase().includes(filterInput.value.toLowerCase()));\r\n  globalFilteredCompanies = filteredCompanies;\r\n  renderButtons(filteredCompanies);\r\n  renderCompanies(filteredCompanies);\r\n}\r\n\r\n\r\nbootFunction();\r\n\r\n"]}