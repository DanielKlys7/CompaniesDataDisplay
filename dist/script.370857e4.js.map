{"version":3,"sources":["src/script/index.js"],"names":["table","document","querySelector","wrapper","tbody","filterInput","btnsContainers","querySelectorAll","globalCompanies","globalSortedCompanies","globalFilteredCompanies","fetchCompanies","response","fetch","data","json","fetchIncomes","id","mergeFetchObjects","fetchedCompanies","fetchedCompany","fetchedIncomes","incomes","calculateTotalIncome","companies","company","totalIncome","reduce","previous","current","Number","value","sortByParam","param","sort","a","b","name","city","checkArrayToRender","pageButtons","currentPage","amountOfItemsPerPage","renderButtons","array","amountOfPages","Math","ceil","length","buttonElement","i","forEach","innerHTML","button","addEventListener","e","handlePageChange","addCurrentPage","companiesToRender","renderCompanies","handleCurrentPageFocus","minusCurrentPage","btns","getElementsByClassName","btn","classList","remove","dataset","add","target","loader","parentNode","removeChild","itemsOfPage","slice","companiesIntoElements","map","toFixed","join","companiesRows","companyRow","handleCompanyClick","specificCompany","globalSortedCompany","key","currentDate","Date","firstDay","getFullYear","getMonth","lastDay","lastMonthIncomesOfSpecificCompany","filter","item","parse","date","getTime","lastMonthTotalIncome","modalTemplate","insertAdjacentHTML","dateFrom","dateTo","betweenDatesHandler","totalBetweenDatesDisplay","averageBetweenDatesDisplay","displayCustomDatesIncomes","timeFrom","timeTo","specificCompanyIncomesBetweenDates","totalIncomeBetweenDates","textContent","modal","modalClosingBtn","body","filterByName","filteredCompanies","toLowerCase","indexOf","sortByInput","bootFunction","sortedCompanies"],"mappings":"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","file":"script.370857e4.js","sourceRoot":"..","sourcesContent":["const table = document.querySelector('.table')\r\nconst wrapper = document.querySelector('.wrapper');\r\nconst tbody = document.querySelector('.table__body')\r\nconst filterInput = document.querySelector('.filterInput')\r\nconst btnsContainers = document.querySelectorAll('.btnsContainer')\r\n\r\nlet globalCompanies;\r\nlet globalSortedCompanies;\r\nlet globalFilteredCompanies;\r\n\r\nconst fetchCompanies = async () => {\r\n  let response = await fetch(`https://recruitment.hal.skygate.io/companies`);\r\n  let data = await response.json();\r\n  return data;\r\n};\r\n\r\nconst fetchIncomes = async (id) => {\r\n  let response = await fetch(`https://recruitment.hal.skygate.io/incomes/${id}`);\r\n  let data = await response.json();\r\n  return data;\r\n};\r\n\r\nconst mergeFetchObjects = async () => {\r\n  let fetchedCompanies = await fetchCompanies();\r\n  for (fetchedCompany of fetchedCompanies) {\r\n    const fetchedIncomes = await fetchIncomes(fetchedCompany.id);\r\n    fetchedCompany.incomes = await fetchedIncomes.incomes;\r\n  };\r\n  return fetchedCompanies;\r\n};\r\n\r\nconst calculateTotalIncome = async () => {\r\n  const companies = await mergeFetchObjects();\r\n  for (company of companies) {\r\n    company.totalIncome = company.incomes.reduce((previous, current) => {\r\n      return previous + Number(current.value);\r\n    }, 0);\r\n  }\r\n  globalCompanies = companies;\r\n  return companies;\r\n}\r\n\r\nconst sortByParam = async (param) => {\r\n  const companies = (globalCompanies || await calculateTotalIncome());\r\n  switch (param) {\r\n    case \"totalIncome\":\r\n      companies.sort((a, b) => (a.totalIncome < b.totalIncome) ? 1 : -1);\r\n      break;\r\n    case \"id\":\r\n      companies.sort((a, b) => (a.id < b.id) ? -1 : 1);\r\n      break;\r\n    case \"name\":\r\n      companies.sort((a, b) => (a.name < b.name) ? -1 : 1);\r\n      break;\r\n    case \"city\":\r\n      companies.sort((a, b) => (a.city < b.city) ? -1 : 1);\r\n      break;\r\n    default:\r\n      companies.sort((a, b) => (a.totalIncome < b.totalIncome) ? 1 : -1);\r\n      break;\r\n  }\r\n  globalSortedCompanies = companies;\r\n  return companies;\r\n}\r\n\r\nconst checkArrayToRender = () => {\r\n  if (!filterInput.value) return globalSortedCompanies;\r\n  return globalFilteredCompanies\r\n} \r\n\r\n//Pagination\r\nlet pageButtons;\r\nlet currentPage = 1;\r\nconst amountOfItemsPerPage = 15;\r\n\r\nconst renderButtons = (array) => {\r\n  const amountOfPages = Math.ceil(array.length / amountOfItemsPerPage);\r\n  let buttonElement = \"\";\r\n  for (let i = -1; i <= 2; i++) {\r\n    if ((currentPage + i <= 20) && (currentPage + i > 0) && (i < amountOfPages)) {\r\n      buttonElement += `<button class=\"pageButton\" data-value=${currentPage + i}>${currentPage+ i}</button>`\r\n    }\r\n  };\r\n  btnsContainers.forEach(i => i.innerHTML = `\r\n    <button class=\"pageButton\" data-value=\"1\">first</button>\r\n    <button class=\"previousPageBtn\">&#8592; previous</button>\r\n    ${buttonElement}\r\n    <button class=\"nextPageBtn\">next &#8594;</button>\r\n    <button class=\"pageButton\" data-value=${amountOfPages}>last</button>`\r\n  );\r\n  pageButtons = document.querySelectorAll('.pageButton');\r\n  for (button of pageButtons) {\r\n    button.addEventListener(\"click\", (e) => {\r\n      handlePageChange(e);\r\n    });\r\n  };\r\n  const addCurrentPage = () => {\r\n    const companiesToRender = checkArrayToRender();\r\n    if (currentPage < amountOfPages) {\r\n      currentPage++;\r\n      renderCompanies(companiesToRender);\r\n      renderButtons(companiesToRender);\r\n      handleCurrentPageFocus();\r\n    }\r\n  }\r\n  const minusCurrentPage = () => {\r\n    const companiesToRender = checkArrayToRender();\r\n    if (currentPage > 1) {\r\n      currentPage--;\r\n      renderCompanies(companiesToRender);\r\n      renderButtons(companiesToRender);\r\n      handleCurrentPageFocus();\r\n    } \r\n  }\r\n  document.querySelectorAll('.previousPageBtn').forEach(i => i.addEventListener('click', () => minusCurrentPage()));\r\n  document.querySelectorAll('.nextPageBtn').forEach(i => i.addEventListener('click', () => addCurrentPage()));\r\n  handleCurrentPageFocus();\r\n};\r\n\r\nconst handleCurrentPageFocus = () => {\r\n  const btns = document.getElementsByClassName('pageButton');\r\n  for (btn of btns) {\r\n    btn.classList.remove('currentPage')\r\n    if(currentPage === Number(btn.dataset.value)) {\r\n      btn.classList.add('currentPage')\r\n    }\r\n  }\r\n}\r\n\r\nconst handlePageChange = (e) => {\r\n  const companiesToRender = checkArrayToRender();\r\n  currentPage = Number(e.target.dataset.value);\r\n  renderCompanies(companiesToRender);\r\n  renderButtons(companiesToRender);\r\n  handleCurrentPageFocus();\r\n}\r\n\r\n//Render\r\nconst renderCompanies = (array) => {\r\n  const loader = document.querySelector('.loader');\r\n  if (loader) loader.parentNode.removeChild(loader);\r\n  const itemsOfPage = array.slice((currentPage * amountOfItemsPerPage - amountOfItemsPerPage), (amountOfItemsPerPage * currentPage));\r\n  const companiesIntoElements = itemsOfPage.map((company) => (\r\n    `<tr class=\"body__company company\" data-key=${company.id}>\r\n      <td class=\"company__id\">${company.id}</td>\r\n      <td class=\"company__name\">${company.name}</td>\r\n      <td class=\"company__city\">${company.city}</td>\r\n      <td class=\"company__totalIncome\">${company.totalIncome.toFixed(2)}</td>\r\n    </tr>`\r\n    )).join('');\r\n  tbody.innerHTML = companiesIntoElements;\r\n  const companiesRows = document.querySelectorAll('.body__company');\r\n  for (companyRow of companiesRows) {\r\n    companyRow.addEventListener('click', (e) => {handleCompanyClick(e)})\r\n  };\r\n}\r\n\r\n//Company click and modal\r\nconst handleCompanyClick = (e) => {\r\n  wrapper.classList.add('notClickable');\r\n  let specificCompany;\r\n  for (globalSortedCompany of globalSortedCompanies) {\r\n    if(Number(e.target.parentNode.dataset.key) === globalSortedCompany.id) {\r\n      specificCompany = globalSortedCompany;\r\n    };\r\n  };\r\n\r\n  const currentDate = new Date();\r\n  const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);\r\n  const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0);\r\n\r\n  let lastMonthIncomesOfSpecificCompany = specificCompany.incomes.filter(item => Date.parse(item.date) > firstDay.getTime() && Date.parse(item.date) < lastDay.getTime());\r\n  let lastMonthTotalIncome = lastMonthIncomesOfSpecificCompany.reduce((previous, current) => {\r\n    return previous + Number(current.value);\r\n  }, 0);\r\n\r\n  const modalTemplate = `\r\n  <div class=\"customModal\">\r\n    <div class=\"customModal__basicData basicData\">\r\n      <p class=\"basicData__id\" >id: ${specificCompany.id}</p>\r\n      <p class=\"basicData__name\">name: ${specificCompany.name}</p>\r\n      <p class=\"basicData__city\">city: ${specificCompany.city}</p>\r\n      <p class=\"basicData__totalIncome\">total income: ${specificCompany.totalIncome}</p>\r\n      <p class=\"basicData__averageIncome\">average income: ${specificCompany.totalIncome / specificCompany.incomes.length}</p>\r\n      <p class=\"basicData__lastMonthTotal\">Last month total income: ${lastMonthTotalIncome}</p>\r\n    </div>\r\n    <div class=\"datePickers\">\r\n      <label for=\"dateFrom\">Date from:</label>\r\n      <input id=\"dateFrom\" type=\"date\" class=\"datePickers__dateFrom\" placeholder=\"Date from\"/>\r\n      <label for=\"dateTo\">Date to:</label>\r\n      <input id=\"dateTo\" type=\"date\" class=\"datePickers__dateTo placeholder=\"Date to\"/>\r\n      <button class=\"handleBetweenDatesBtn\">Check!</button>\r\n    </div>\r\n    <div class=\"datePickers__dataDisplay\">\r\n      <p>total income between dates: <span class=\"totalBetweenDatesDisplay\">0</span></p>\r\n      <p>average income between dates: <span class=\"averageBetweenDatesDisplay\">0</span></p>\r\n    </div>\r\n    <button class=\"modalClosingBtn\">OK!</button>\r\n  </div>\r\n  `;\r\n  wrapper.insertAdjacentHTML('afterend', modalTemplate);\r\n\r\n  const dateFrom = document.querySelector('.datePickers__dateFrom');\r\n  const dateTo = document.querySelector('.datePickers__dateTo');\r\n  const betweenDatesHandler = document.querySelector('.handleBetweenDatesBtn');\r\n  const totalBetweenDatesDisplay = document.querySelector('.totalBetweenDatesDisplay')\r\n  const averageBetweenDatesDisplay = document.querySelector('.averageBetweenDatesDisplay')\r\n\r\n  const displayCustomDatesIncomes = () => {\r\n    const timeFrom = new Date(dateFrom.value).getTime();\r\n    const timeTo = new Date(dateTo.value).getTime();\r\n\r\n    const specificCompanyIncomesBetweenDates = specificCompany.incomes.filter(item => Date.parse(item.date) > timeFrom && Date.parse(item.date) < timeTo);\r\n    const totalIncomeBetweenDates = specificCompanyIncomesBetweenDates.reduce((previous, current) => {\r\n      return previous + Number(current.value);\r\n    }, 0);\r\n\r\n    totalBetweenDatesDisplay.textContent = totalIncomeBetweenDates;\r\n    averageBetweenDatesDisplay.textContent = totalIncomeBetweenDates / specificCompanyIncomesBetweenDates.length;\r\n  }\r\n\r\n  betweenDatesHandler.addEventListener('click', () => displayCustomDatesIncomes())\r\n\r\n  const modal = document.querySelector('.customModal');\r\n  const modalClosingBtn = document.querySelector('.modalClosingBtn');\r\n  modalClosingBtn.addEventListener('click', () => {\r\n    wrapper.classList.remove('notClickable');\r\n    document.body.removeChild(modal);\r\n  })\r\n}\r\n//Filter By Name \r\nconst filterByName = async () => {\r\n  currentPage = 1;\r\n  const filteredCompanies = globalSortedCompanies.filter((i) => i.name.toLowerCase().indexOf(filterInput.value.toLowerCase()) === 0);\r\n  globalFilteredCompanies = filteredCompanies;\r\n  renderButtons(filteredCompanies);\r\n  renderCompanies(filteredCompanies);\r\n}\r\n\r\nfilterInput.addEventListener(\"input\", () => {\r\n  filterByName();\r\n})\r\n\r\n//Sort by value\r\nconst sortByInput = document.querySelector('.sortInput');\r\nsortByInput.addEventListener('change', (e) => {\r\n  filterInput.value = \"\";\r\n  currentPage = 1;\r\n  sortByParam(e.target.value);\r\n  renderCompanies(globalSortedCompanies);\r\n  renderButtons(globalSortedCompanies);\r\n})\r\n\r\n//Boot\r\nconst bootFunction = async () => {\r\n  const sortedCompanies = (globalSortedCompanies || await sortByParam(\"totalIncome\"));\r\n  renderButtons(sortedCompanies);\r\n  renderCompanies(sortedCompanies);\r\n}\r\n    \r\n\r\nbootFunction();\r\n\r\n"]}