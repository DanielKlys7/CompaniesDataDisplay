{"version":3,"sources":["src/script/index.js"],"names":["table","document","querySelector","wrapper","tbody","filterInput","btnsContainers","querySelectorAll","globalSortedCompanies","globalFilteredCompanies","fetchCompanies","response","fetch","data","json","fetchIncomes","id","mergeFetchObjects","fetchedCompanies","fetchedCompany","fetchedIncomes","incomes","calculateTotalIncome","companies","company","totalIncome","reduce","previous","current","Number","value","sortByTotalIncome","sort","a","b","pageButtons","currentPage","amountOfItemsPerPage","renderButtons","array","amountOfPages","Math","ceil","length","buttonElement","i","button","forEach","innerHTML","addEventListener","e","handlePageChange","renderCompanies","handleCurrentPageFocus","btns","getElementsByClassName","btn","classList","remove","dataset","add","target","itemsOfPage","companiesIntoElements","slice","map","name","city","toFixed","join","companiesRows","companyRow","handleCompanyClick","specificCompany","globalSortedCompany","parentNode","key","currentDate","Date","firstDay","getFullYear","getMonth","lastDay","lastMonthIncomesOfSpecificCompany","lastMonthTotalIncome","filter","item","parse","date","getTime","modalTemplate","insertAdjacentHTML","dateFrom","dateTo","betweenDatesHandler","totalBetweenDatesDisplay","averageBetweenDatesDisplay","timeFrom","timeTo","specificCompanyIncomesBetweenDates","totalIncomeBetweenDates","textContent","displayCustomDatesIncomes","modal","body","removeChild","filterByName","filteredCompanies","toLowerCase","includes","bootFunction","sortedCompanies"],"mappings":"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","file":"script.aafab428.js","sourceRoot":"..","sourcesContent":["const table = document.querySelector('.table')\r\nconst wrapper = document.querySelector('.wrapper');\r\nconst tbody = document.querySelector('.table__body')\r\nconst filterInput = document.querySelector('.filterInput')\r\nconst btnsContainers = document.querySelectorAll('.btnsContainer')\r\n\r\nlet globalSortedCompanies;\r\nlet globalFilteredCompanies;\r\n\r\nconst fetchCompanies = async () => {\r\n  let response = await fetch(`https://recruitment.hal.skygate.io/companies`);\r\n  let data = await response.json();\r\n  return data;\r\n};\r\n\r\nconst fetchIncomes = async (id) => {\r\n  let response = await fetch(`https://recruitment.hal.skygate.io/incomes/${id}`);\r\n  let data = await response.json();\r\n  return data;\r\n};\r\n\r\nconst mergeFetchObjects = async () => {\r\n  let fetchedCompanies = await fetchCompanies();\r\n  for (fetchedCompany of fetchedCompanies) {\r\n    const fetchedIncomes = await fetchIncomes(fetchedCompany.id);\r\n    fetchedCompany.incomes = await fetchedIncomes.incomes;\r\n  };\r\n  return fetchedCompanies;\r\n};\r\n\r\nconst calculateTotalIncome = async () => {\r\n  const companies = await mergeFetchObjects();\r\n  for (company of companies) {\r\n    company.totalIncome = company.incomes.reduce((previous, current) => {\r\n      return previous + Number(current.value);\r\n    }, 0);\r\n  }\r\n  return companies;\r\n}\r\n\r\nconst sortByTotalIncome = async () => {\r\n  const companies = await calculateTotalIncome();\r\n  companies.sort((a, b) => (a.totalIncome < b.totalIncome) ? 1 : -1);\r\n  globalSortedCompanies = companies;\r\n  return companies;\r\n}\r\n\r\n//Pagination\r\nlet pageButtons;\r\n\r\nlet currentPage = 1;\r\nconst amountOfItemsPerPage = 15;\r\n\r\nconst renderButtons = (array) => {\r\n  const amountOfPages = Math.ceil(array.length / amountOfItemsPerPage);\r\n  let buttonElement = \"\";\r\n  for (let i = -1; i <= 2; i++) {\r\n    if ((currentPage + i <= 20) && (currentPage + i > 0)) {\r\n      buttonElement += `<button class=\"pageButton\" data-value=${currentPage + i}>${currentPage+ i}</button>`\r\n    }\r\n  };\r\n  btnsContainers.forEach(i => i.innerHTML = `\r\n    <button class=\"pageButton\" data-value=\"1\">first</button>\r\n    <button class=\"previousPageBtn\">&#8592; previous</button>\r\n    ${buttonElement}\r\n    <button class=\"nextPageBtn\">next &#8594;</button>\r\n    <button class=\"pageButton\" data-value=${amountOfPages}>last</button>`\r\n  );\r\n  pageButtons = document.querySelectorAll('.pageButton');\r\n  for (button of pageButtons) {\r\n    button.addEventListener(\"click\", (e) => {\r\n      handlePageChange(e);\r\n    });\r\n  };\r\n  const addCurrentPage = () => {\r\n    if (currentPage < amountOfPages) {\r\n      currentPage++;\r\n      renderCompanies(globalFilteredCompanies || globalSortedCompanies);\r\n      renderButtons(globalSortedCompanies);\r\n      handleCurrentPageFocus();\r\n    }\r\n  }\r\n  const minusCurrentPage = () => {\r\n    if (currentPage > 1) {\r\n      currentPage--;\r\n      renderCompanies(globalFilteredCompanies || globalSortedCompanies);\r\n      renderButtons(globalSortedCompanies);\r\n      handleCurrentPageFocus();\r\n    } \r\n  }\r\n  document.querySelectorAll('.previousPageBtn').forEach(i => i.addEventListener('click', () => minusCurrentPage()));\r\n  document.querySelectorAll('.nextPageBtn').forEach(i => i.addEventListener('click', () => addCurrentPage()));\r\n  handleCurrentPageFocus();\r\n};\r\n\r\nconst handleCurrentPageFocus = () => {\r\n  const btns = document.getElementsByClassName('pageButton');\r\n  for (btn of btns) {\r\n    btn.classList.remove('currentPage')\r\n    if(currentPage === Number(btn.dataset.value)) {\r\n      btn.classList.add('currentPage')\r\n    }\r\n  }\r\n}\r\n\r\nconst handlePageChange = (e) => {\r\n  currentPage = Number(e.target.dataset.value);\r\n  renderCompanies(globalFilteredCompanies || globalSortedCompanies);\r\n  renderButtons(globalSortedCompanies);\r\n  handleCurrentPageFocus();\r\n}\r\n\r\n//Render\r\nconst renderCompanies = (array) => {\r\n  const itemsOfPage = array.slice((currentPage * amountOfItemsPerPage - amountOfItemsPerPage), (amountOfItemsPerPage * currentPage));\r\n  const companiesIntoElements = itemsOfPage.map((company) => (\r\n    `<tr class=\"body__company\" data-key=${company.id}>\r\n      <td>${company.id}</td>\r\n      <td>${company.name}</td>\r\n      <td>${company.city}</td>\r\n      <td>${company.totalIncome.toFixed(2)}</td>\r\n    </tr>`\r\n    )).join('');\r\n  tbody.innerHTML = companiesIntoElements;\r\n  const companiesRows = document.querySelectorAll('.body__company');\r\n  for (companyRow of companiesRows) {\r\n    companyRow.addEventListener('click', (e) => {handleCompanyClick(e)})\r\n  };\r\n}\r\n\r\n//Company click and modal\r\nconst handleCompanyClick = (e) => {\r\n  let specificCompany;\r\n  for (globalSortedCompany of globalSortedCompanies) {\r\n    if(Number(e.target.parentNode.dataset.key) === globalSortedCompany.id) {\r\n      specificCompany = globalSortedCompany;\r\n    };\r\n  };\r\n\r\n  const currentDate = new Date();\r\n  const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);\r\n  const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0);\r\n\r\n  let lastMonthIncomesOfSpecificCompany = specificCompany.incomes.filter(item => Date.parse(item.date) > firstDay.getTime() && Date.parse(item.date) < lastDay.getTime());\r\n  let lastMonthTotalIncome = lastMonthIncomesOfSpecificCompany.reduce((previous, current) => {\r\n    return previous + Number(current.value);\r\n  }, 0);\r\n\r\n  const modalTemplate = `\r\n  <div class=\"customModal\">\r\n    <div class=\"customModal__basicData\">\r\n      <p>id: ${specificCompany.id}</p>\r\n      <p>name: ${specificCompany.name}</p>\r\n      <p>city: ${specificCompany.city}</p>\r\n      <p>total income: ${specificCompany.totalIncome}</p>\r\n      <p>average income: ${specificCompany.totalIncome / specificCompany.incomes.length}</p>\r\n      <p>Last month total income: ${lastMonthTotalIncome}</p>\r\n    </div>\r\n    <div class=\"datePickers\">\r\n      <label for=\"dateFrom\">Date from:</label>\r\n      <input id=\"dateFrom\" type=\"date\" class=\"datePickers__dateFrom\" placeholder=\"Date from\"/>\r\n      <label for=\"dateTo\">Date to:</label>\r\n      <input id=\"dateTo\" type=\"date\" class=\"datePickers__dateTo placeholder=\"Date to\"/>\r\n      <button class=\"handleBetweenDatesBtn\">Check!</button>\r\n    </div>\r\n    <div class=\"datePickers__dataDisplay\">\r\n      <p>total income between dates: <span class=\"totalBetweenDatesDisplay\">0</span></p>\r\n      <p>average income between dates: <span class=\"averageBetweenDatesDisplay\">0</span></p>\r\n    </div>\r\n    <button class=\"modalClosingBtn\">OK!</button>\r\n  </div>\r\n  `;\r\n  wrapper.insertAdjacentHTML('afterend', modalTemplate);\r\n\r\n  const dateFrom = document.querySelector('.datePickers__dateFrom');\r\n  const dateTo = document.querySelector('.datePickers__dateTo');\r\n  const betweenDatesHandler = document.querySelector('.handleBetweenDatesBtn');\r\n  const totalBetweenDatesDisplay = document.querySelector('.totalBetweenDatesDisplay')\r\n  const averageBetweenDatesDisplay = document.querySelector('.averageBetweenDatesDisplay')\r\n\r\n  const displayCustomDatesIncomes = () => {\r\n    const timeFrom = new Date(dateFrom.value).getTime();\r\n    const timeTo = new Date(dateTo.value).getTime();\r\n\r\n    const specificCompanyIncomesBetweenDates = specificCompany.incomes.filter(item => Date.parse(item.date) > timeFrom && Date.parse(item.date) < timeTo);\r\n    const totalIncomeBetweenDates = specificCompanyIncomesBetweenDates.reduce((previous, current) => {\r\n      return previous + Number(current.value);\r\n    }, 0);\r\n\r\n    totalBetweenDatesDisplay.textContent = totalIncomeBetweenDates;\r\n    averageBetweenDatesDisplay.textContent = totalIncomeBetweenDates / specificCompanyIncomesBetweenDates.length;\r\n  }\r\n\r\n  betweenDatesHandler.addEventListener('click', () => displayCustomDatesIncomes())\r\n\r\n  const modal = document.querySelector('.customModal');\r\n  const modalClosingBtn = document.querySelector('.modalClosingBtn');\r\n  modalClosingBtn.addEventListener('click', () => {\r\n    document.body.removeChild(modal);\r\n  })\r\n}\r\n\r\nconst filterByName = async () => {\r\n  currentPage = 1;\r\n  const filteredCompanies = globalSortedCompanies.filter((i) => i.name.toLowerCase().includes(filterInput.value.toLowerCase()));\r\n  globalFilteredCompanies = filteredCompanies;\r\n  renderButtons(filteredCompanies);\r\n  renderCompanies(filteredCompanies);\r\n}\r\n\r\n//Boot\r\nconst bootFunction = async () => {\r\n  const sortedCompanies = (globalSortedCompanies || await sortByTotalIncome());\r\n  renderButtons(sortedCompanies);\r\n  renderCompanies(sortedCompanies);\r\n  filterInput.addEventListener(\"input\", () => {\r\n    filterByName();\r\n  })\r\n}\r\n    \r\n\r\nbootFunction();\r\n\r\n"]}