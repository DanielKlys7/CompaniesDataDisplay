{"version":3,"sources":["src/script/index.js"],"names":["table","document","querySelector","wrapper","tbody","filterInput","sortInput","btnsContainers","querySelectorAll","globalCompanies","globalSortedCompanies","globalFilteredCompanies","fetchCompanies","response","fetch","data","json","fetchIncomes","id","mergeFetchObjects","fetchedCompanies","fetchedCompany","fetchedIncomes","incomes","calculateTotalIncome","companies","company","totalIncome","reduce","previous","current","Number","value","sortByParam","param","sort","a","b","name","city","checkArrayToRender","pageButtons","currentPage","amountOfItemsPerPage","renderButtons","array","amountOfPages","Math","ceil","length","buttonElement","i","button","forEach","innerHTML","addEventListener","e","handlePageChange","companiesToRender","renderCompanies","handleCurrentPageFocus","minusCurrentPage","addCurrentPage","btns","getElementsByClassName","btn","classList","remove","dataset","add","target","loader","parentNode","removeChild","itemsOfPage","companiesIntoElements","slice","map","toFixed","join","companiesRows","companyRow","handleCompanyClick","specificCompany","globalSortedCompany","key","currentDate","Date","firstDay","getFullYear","getMonth","lastDay","lastMonthIncomesOfSpecificCompany","lastMonthTotalIncome","filter","item","parse","date","getTime","modalTemplate","insertAdjacentHTML","dateFrom","dateTo","betweenDatesHandler","totalBetweenDatesDisplay","averageBetweenDatesDisplay","timeFrom","timeTo","specificCompanyIncomesBetweenDates","totalIncomeBetweenDates","textContent","displayCustomDatesIncomes","modal","body","filterByName","filteredCompanies","toLowerCase","indexOf","sortByInput","bootFunction","sortedCompanies","disabled"],"mappings":"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","file":"script.b813ede4.js","sourceRoot":"..","sourcesContent":["const table = document.querySelector('.table')\r\nconst wrapper = document.querySelector('.wrapper');\r\nconst tbody = document.querySelector('.table__body');\r\nconst filterInput = document.querySelector('.filterInput');\r\nconst sortInput = document.querySelector('.sortInput');\r\nconst btnsContainers = document.querySelectorAll('.btnsContainer');\r\n\r\nlet globalCompanies;\r\nlet globalSortedCompanies;\r\nlet globalFilteredCompanies;\r\n\r\nconst fetchCompanies = async () => {\r\n  let response = await fetch(`https://recruitment.hal.skygate.io/companies`);\r\n  let data = await response.json();\r\n  return data;\r\n};\r\n\r\nconst fetchIncomes = async (id) => {\r\n  let response = await fetch(`https://recruitment.hal.skygate.io/incomes/${id}`);\r\n  let data = await response.json();\r\n  return data;\r\n};\r\n\r\nconst mergeFetchObjects = async () => {\r\n  let fetchedCompanies = await fetchCompanies();\r\n  for (fetchedCompany of fetchedCompanies) {\r\n    const fetchedIncomes = await fetchIncomes(fetchedCompany.id);\r\n    fetchedCompany.incomes = await fetchedIncomes.incomes;\r\n  };\r\n  return fetchedCompanies;\r\n};\r\n\r\nconst calculateTotalIncome = async () => {\r\n  const companies = await mergeFetchObjects();\r\n  for (company of companies) {\r\n    company.totalIncome = company.incomes.reduce((previous, current) => {\r\n      return previous + Number(current.value);\r\n    }, 0);\r\n  }\r\n  globalCompanies = companies;\r\n  return companies;\r\n}\r\n\r\nconst sortByParam = async (param) => {\r\n  const companies = (globalCompanies || await calculateTotalIncome());\r\n  switch (param) {\r\n    case \"totalIncome\":\r\n      companies.sort((a, b) => (a.totalIncome < b.totalIncome) ? 1 : -1);\r\n      break;\r\n    case \"id\":\r\n      companies.sort((a, b) => (a.id < b.id) ? -1 : 1);\r\n      break;\r\n    case \"name\":\r\n      companies.sort((a, b) => (a.name < b.name) ? -1 : 1);\r\n      break;\r\n    case \"city\":\r\n      companies.sort((a, b) => (a.city < b.city) ? -1 : 1);\r\n      break;\r\n    default:\r\n      companies.sort((a, b) => (a.totalIncome < b.totalIncome) ? 1 : -1);\r\n      break;\r\n  }\r\n  globalSortedCompanies = companies;\r\n  return companies;\r\n}\r\n\r\nconst checkArrayToRender = () => {\r\n  if (!filterInput.value) return globalSortedCompanies;\r\n  return globalFilteredCompanies\r\n} \r\n\r\n//Pagination\r\nlet pageButtons;\r\nlet currentPage = 1;\r\nconst amountOfItemsPerPage = 15;\r\n\r\nconst renderButtons = (array) => {\r\n  const amountOfPages = Math.ceil(array.length / amountOfItemsPerPage);\r\n  let buttonElement = \"\";\r\n  for (let i = -1; i <= 2; i++) {\r\n    if ((currentPage + i <= 20) && (currentPage + i > 0) && (i < amountOfPages)) {\r\n      buttonElement += `<button class=\"pageButton\" data-value=${currentPage + i}>${currentPage+ i}</button>`\r\n    }\r\n  };\r\n  btnsContainers.forEach(i => i.innerHTML = `\r\n    <button class=\"pageButton\" data-value=\"1\">first</button>\r\n    <button class=\"previousPageBtn\">&#8592; previous</button>\r\n    ${buttonElement}\r\n    <button class=\"nextPageBtn\">next &#8594;</button>\r\n    <button class=\"pageButton\" data-value=${amountOfPages}>last</button>`\r\n  );\r\n  pageButtons = document.querySelectorAll('.pageButton');\r\n  for (button of pageButtons) {\r\n    button.addEventListener(\"click\", (e) => {\r\n      handlePageChange(e);\r\n    });\r\n  };\r\n  const addCurrentPage = () => {\r\n    const companiesToRender = checkArrayToRender();\r\n    if (currentPage < amountOfPages) {\r\n      currentPage++;\r\n      renderCompanies(companiesToRender);\r\n      renderButtons(companiesToRender);\r\n      handleCurrentPageFocus();\r\n    }\r\n  }\r\n  const minusCurrentPage = () => {\r\n    const companiesToRender = checkArrayToRender();\r\n    if (currentPage > 1) {\r\n      currentPage--;\r\n      renderCompanies(companiesToRender);\r\n      renderButtons(companiesToRender);\r\n      handleCurrentPageFocus();\r\n    } \r\n  }\r\n  document.querySelectorAll('.previousPageBtn').forEach(i => i.addEventListener('click', () => minusCurrentPage()));\r\n  document.querySelectorAll('.nextPageBtn').forEach(i => i.addEventListener('click', () => addCurrentPage()));\r\n  handleCurrentPageFocus();\r\n};\r\n\r\nconst handleCurrentPageFocus = () => {\r\n  const btns = document.getElementsByClassName('pageButton');\r\n  for (btn of btns) {\r\n    btn.classList.remove('currentPage')\r\n    if(currentPage === Number(btn.dataset.value)) {\r\n      btn.classList.add('currentPage')\r\n    }\r\n  }\r\n}\r\n\r\nconst handlePageChange = (e) => {\r\n  const companiesToRender = checkArrayToRender();\r\n  currentPage = Number(e.target.dataset.value);\r\n  renderCompanies(companiesToRender);\r\n  renderButtons(companiesToRender);\r\n  handleCurrentPageFocus();\r\n}\r\n\r\n//Render\r\nconst renderCompanies = (array) => {\r\n  const loader = document.querySelector('.loader');\r\n  if (loader) loader.parentNode.removeChild(loader);\r\n  const itemsOfPage = array.slice((currentPage * amountOfItemsPerPage - amountOfItemsPerPage), (amountOfItemsPerPage * currentPage));\r\n  const companiesIntoElements = itemsOfPage.map((company) => (\r\n    `<tr class=\"body__company company\" data-key=${company.id}>\r\n      <td class=\"company__id\">${company.id}</td>\r\n      <td class=\"company__name\">${company.name}</td>\r\n      <td class=\"company__city\">${company.city}</td>\r\n      <td class=\"company__totalIncome\">${company.totalIncome.toFixed(2)}</td>\r\n    </tr>`\r\n    )).join('');\r\n  tbody.innerHTML = companiesIntoElements;\r\n  const companiesRows = document.querySelectorAll('.body__company');\r\n  for (companyRow of companiesRows) {\r\n    companyRow.addEventListener('click', (e) => {handleCompanyClick(e)})\r\n  };\r\n}\r\n\r\n//Company click and modal\r\nconst handleCompanyClick = (e) => {\r\n  wrapper.classList.add('notClickable');\r\n  let specificCompany;\r\n  for (globalSortedCompany of globalSortedCompanies) {\r\n    if(Number(e.target.parentNode.dataset.key) === globalSortedCompany.id) {\r\n      specificCompany = globalSortedCompany;\r\n    };\r\n  };\r\n\r\n  const currentDate = new Date();\r\n  const firstDay = new Date(currentDate.getFullYear(), currentDate.getMonth() - 1, 1);\r\n  const lastDay = new Date(currentDate.getFullYear(), currentDate.getMonth(), 0);\r\n\r\n  let lastMonthIncomesOfSpecificCompany = specificCompany.incomes.filter(item => Date.parse(item.date) > firstDay.getTime() && Date.parse(item.date) < lastDay.getTime());\r\n  let lastMonthTotalIncome = lastMonthIncomesOfSpecificCompany.reduce((previous, current) => {\r\n    return previous + Number(current.value);\r\n  }, 0);\r\n\r\n  const modalTemplate = `\r\n  <div class=\"customModal\">\r\n    <div class=\"customModal__basicData basicData\">\r\n      <p class=\"basicData__id\" >id: ${specificCompany.id}</p>\r\n      <p class=\"basicData__name\">name: ${specificCompany.name}</p>\r\n      <p class=\"basicData__city\">city: ${specificCompany.city}</p>\r\n      <p class=\"basicData__totalIncome\">total income: ${specificCompany.totalIncome}</p>\r\n      <p class=\"basicData__averageIncome\">average income: ${specificCompany.totalIncome / specificCompany.incomes.length}</p>\r\n      <p class=\"basicData__lastMonthTotal\">Last month total income: ${lastMonthTotalIncome}</p>\r\n    </div>\r\n    <div class=\"datePickers\">\r\n      <label for=\"dateFrom\">Date from:</label>\r\n      <input id=\"dateFrom\" type=\"date\" class=\"datePickers__dateFrom\" placeholder=\"Date from\"/>\r\n      <label for=\"dateTo\">Date to:</label>\r\n      <input id=\"dateTo\" type=\"date\" class=\"datePickers__dateTo placeholder=\"Date to\"/>\r\n      <button class=\"handleBetweenDatesBtn\">Check!</button>\r\n    </div>\r\n    <div class=\"datePickers__dataDisplay\">\r\n      <p>total income between dates: <span class=\"totalBetweenDatesDisplay\">0</span></p>\r\n      <p>average income between dates: <span class=\"averageBetweenDatesDisplay\">0</span></p>\r\n    </div>\r\n    <button class=\"modalClosingBtn\">OK!</button>\r\n  </div>\r\n  `;\r\n  wrapper.insertAdjacentHTML('afterend', modalTemplate);\r\n\r\n  const dateFrom = document.querySelector('.datePickers__dateFrom');\r\n  const dateTo = document.querySelector('.datePickers__dateTo');\r\n  const betweenDatesHandler = document.querySelector('.handleBetweenDatesBtn');\r\n  const totalBetweenDatesDisplay = document.querySelector('.totalBetweenDatesDisplay')\r\n  const averageBetweenDatesDisplay = document.querySelector('.averageBetweenDatesDisplay')\r\n\r\n  const displayCustomDatesIncomes = () => {\r\n    const timeFrom = new Date(dateFrom.value).getTime();\r\n    const timeTo = new Date(dateTo.value).getTime();\r\n\r\n    const specificCompanyIncomesBetweenDates = specificCompany.incomes.filter(item => Date.parse(item.date) > timeFrom && Date.parse(item.date) < timeTo);\r\n    const totalIncomeBetweenDates = specificCompanyIncomesBetweenDates.reduce((previous, current) => {\r\n      return previous + Number(current.value);\r\n    }, 0);\r\n\r\n    totalBetweenDatesDisplay.textContent = totalIncomeBetweenDates || 0;\r\n    averageBetweenDatesDisplay.textContent = totalIncomeBetweenDates / specificCompanyIncomesBetweenDates.length || 0;\r\n  }\r\n\r\n  betweenDatesHandler.addEventListener('click', () => displayCustomDatesIncomes())\r\n\r\n  const modal = document.querySelector('.customModal');\r\n  const modalClosingBtn = document.querySelector('.modalClosingBtn');\r\n  modalClosingBtn.addEventListener('click', () => {\r\n    wrapper.classList.remove('notClickable');\r\n    document.body.removeChild(modal);\r\n  })\r\n}\r\n//Filter By Name \r\nconst filterByName = async () => {\r\n  currentPage = 1;\r\n  const filteredCompanies = globalSortedCompanies.filter((i) => i.name.toLowerCase().indexOf(filterInput.value.toLowerCase()) === 0);\r\n  globalFilteredCompanies = filteredCompanies;\r\n  renderButtons(filteredCompanies);\r\n  renderCompanies(filteredCompanies);\r\n}\r\n\r\nfilterInput.addEventListener(\"input\", () => {\r\n  filterByName();\r\n})\r\n\r\n//Sort by value\r\nconst sortByInput = document.querySelector('.sortInput');\r\nsortByInput.addEventListener('change', (e) => {\r\n  filterInput.value = \"\";\r\n  currentPage = 1;\r\n  sortByParam(e.target.value);\r\n  renderCompanies(globalSortedCompanies);\r\n  renderButtons(globalSortedCompanies);\r\n})\r\n\r\n//Boot\r\nconst bootFunction = async () => {\r\n  const sortedCompanies = (globalSortedCompanies || await sortByParam(\"totalIncome\"));\r\n  renderButtons(sortedCompanies);\r\n  renderCompanies(sortedCompanies);\r\n  filterInput.disabled = false;\r\n  sortInput.disabled = false; \r\n}\r\n    \r\n\r\nbootFunction();\r\n\r\n"]}